#include &lt;fstream&gt;
<br>#include &lt;iostream&gt;
<br>#include &lt;cstdlib&gt;
<br>using namespace std;
<br>
<br>int N, counter;
<br>
<br>int dist(int x1, int x2, int y1, int y2) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;return abs(x1 - x2) + abs(y1 - y2);
<br>}
<br>
<br>int distSkipped(int x1, int y1,
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x2, int y2,
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x3, int y3) {
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;//printf("%d, %d, %d, %d, %d, %d\n", x1, y1, x2, y2, x3, y3);
<br>&nbsp;&nbsp;&nbsp;&nbsp;return dist(x1, x2, y1, y2) + dist(x2, x3, y2, y3) - dist(x1, x3, y1, y3);
<br>}
<br>
<br>int main() {
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;ifstream fin("marathon.in");
<br>&nbsp;&nbsp;&nbsp;&nbsp;fin &gt;&gt; N;
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;int CheckPts[N][2];
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;for (counter = 0 ; counter &lt; N ; counter++) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fin &gt;&gt; CheckPts[counter][0] &gt;&gt; CheckPts[counter][1];
<br>&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;fin.close();
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;int totalDist = 0;
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;for (counter = 0 ; counter &lt; N - 1 ; counter++) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalDist = totalDist + dist(CheckPts[counter][0], CheckPts[counter + 1][0], CheckPts[counter][1], CheckPts[counter + 1][1]);
<br>&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;//printf("%d\n", totalDist);
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;int maxSkipped = distSkipped(CheckPts[0][0], CheckPts[0][1], CheckPts[1][0], CheckPts[1][1], CheckPts[2][0], CheckPts[2][1]);
<br>&nbsp;&nbsp;&nbsp;&nbsp;int distNow;
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;//printf("%d\n", maxSkipped);
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;for (counter = 2 ; counter &lt; N - 2 ; counter++) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distNow = distSkipped(CheckPts[counter - 1][0], CheckPts[counter - 1][1], CheckPts[counter][0], CheckPts[counter][1], CheckPts[counter + 1][0], CheckPts[counter + 1][1]);
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (distNow &gt; maxSkipped) {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxSkipped = distNow;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//printf("%d\n", maxSkipped);
<br>&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;int minDist = totalDist - maxSkipped;
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;ofstream fout("marathon.out");
<br>&nbsp;&nbsp;&nbsp;&nbsp;fout &lt;&lt; minDist &lt;&lt; "\n";
<br>&nbsp;&nbsp;&nbsp;&nbsp;fout.close();
<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;
<br>}
<br>